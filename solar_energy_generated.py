import httpx
import asyncio
import os
from datetime import datetime, timedelta
from tapo import ApiClient, EnergyDataInterval
from dotenv import load_dotenv

async def monitor_generated_solar_energy_and_notify(device, user):
    load_dotenv()
    tapo_username = os.getenv("TAPO_USERNAME")
    tapo_password = os.getenv("TAPO_PASSWORD")
    solar_ip_address = "192.168.178.61"
    wasching_machine_ip_address = "192.168.178.52"

    client = ApiClient(tapo_username, tapo_password)
    device_solar = await client.p110(solar_ip_address)
    device_wasching_machine = await client.p110(wasching_machine_ip_address)

    device_info = await device_solar.get_device_info()
    print(f"Device info: {device_info.to_dict()}")
    dict_energy_data_daily = (await get_energy_data_daily(device_solar)).to_dict()
    print(f"Energy data (daily): {dict_energy_data_daily}")
    df_energy_consumption = get_date_df_from_dict(dict_energy_data_daily)

df_energy_consumption.set_index('Date', inplace=True)
solar_energy_generated_today = df_energy_consumption.loc[str(datetime.today().date())]['Value']
max_solar_energy = df_energy_consumption['Value'].max()
print(f"The energy consumed today has been {solar_energy_generated_today / 1000:.4g} kWh which is {solar_energy_generated_today / max_solar_energy:.1%} of the maximum energy generated this year.")
# print(f"The energy generated by the solar today has been {dict_energy_data_daily['data'][-1]} kWh")


async def main():
    load_dotenv()
    tapo_username = os.getenv("TAPO_USERNAME")
    tapo_password = os.getenv("TAPO_PASSWORD")
    pushover_user_key = os.getenv("PUSHOVER_USER_KEY")
    pushover_user_group = os.getenv("PUSHOVER_USER_GROUP_WOERIS")
    wasching_machine_ip_address = os.getenv("WASCHING_MACHINE_IP_ADDRESS")

    client = ApiClient(tapo_username, tapo_password)
    device_solar = await client.p110(solar_ip_address)
    # current_power = (await device_wasching_machine.get_current_power()).to_dict()
    await monitor_generated_solar_energy_and_notify(device_wasching_machine, pushover_user_group)
    # send_pushover_notification(f"Current power: {current_power['current_power']}W")

if __name__ == "__main__":
    asyncio.run(main())